{
  "evalId": "eval-DGh-2025-08-19T16:30:43",
  "results": {
    "version": 3,
    "timestamp": "2025-08-19T16:30:43.125Z",
    "prompts": [
      {
        "raw": "{{prompt}}",
        "label": "{{prompt}}",
        "id": "effa18501e44aafd9bc42a2f64ffc9b6350f94025520ca2ed382f9bdc4b6e982",
        "provider": "exec: uv run run.py \"\"",
        "metrics": {
          "score": 0.5,
          "testPassCount": 0,
          "testFailCount": 1,
          "testErrorCount": 0,
          "assertPassCount": 6,
          "assertFailCount": 2,
          "totalLatencyMs": 18048,
          "tokenUsage": {
            "prompt": 0,
            "completion": 0,
            "cached": 0,
            "total": 0,
            "numRequests": 1,
            "completionDetails": {
              "reasoning": 0,
              "acceptedPrediction": 0,
              "rejectedPrediction": 0
            },
            "assertions": {
              "total": 0,
              "prompt": 0,
              "completion": 0,
              "cached": 0,
              "numRequests": 0,
              "completionDetails": {
                "reasoning": 0,
                "acceptedPrediction": 0,
                "rejectedPrediction": 0
              }
            }
          },
          "namedScores": {},
          "namedScoresCount": {},
          "cost": 0
        }
      }
    ],
    "results": [
      {
        "cost": 0,
        "error": "API error: 400 Bad Request\n{\"error\":{\"message\":\"Invalid base64 image_url.\",\"type\":\"invalid_request_error\",\"param\":null,\"code\":\"invalid_base64\"}}",
        "gradingResult": {
          "pass": false,
          "score": 0.5,
          "reason": "API error: 400 Bad Request\n{\"error\":{\"message\":\"Invalid base64 image_url.\",\"type\":\"invalid_request_error\",\"param\":null,\"code\":\"invalid_base64\"}}",
          "namedScores": {},
          "tokensUsed": {
            "total": 0,
            "prompt": 0,
            "completion": 0,
            "cached": 0,
            "numRequests": 0
          },
          "componentResults": [
            {
              "pass": true,
              "score": 1,
              "reason": "Assertion passed",
              "assertion": {
                "type": "is-json",
                "value": {
                  "type": "object",
                  "required": [
                    "edge_count",
                    "highest_degree_node",
                    "average_degree",
                    "density",
                    "shortest_path_alice_eve",
                    "network_graph",
                    "degree_histogram"
                  ],
                  "properties": {
                    "edge_count": {
                      "type": "number"
                    },
                    "highest_degree_node": {
                      "type": "string"
                    },
                    "average_degree": {
                      "type": "number"
                    },
                    "density": {
                      "type": "number"
                    },
                    "shortest_path_alice_eve": {
                      "type": "number"
                    },
                    "network_graph": {
                      "type": "string"
                    },
                    "degree_histogram": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "pass": true,
              "score": 1,
              "reason": "Assertion passed",
              "assertion": {
                "type": "python",
                "weight": 3,
                "value": "if output[\"edge_count\"] == 7 :\n  return True\nreturn False\n"
              }
            },
            {
              "pass": true,
              "score": 1,
              "reason": "Assertion passed",
              "assertion": {
                "type": "python",
                "weight": 3,
                "value": "if output[\"highest_degree_node\"].lower() == \"bob\" :\n  return True\nreturn False\n"
              }
            },
            {
              "pass": true,
              "score": 1,
              "reason": "Assertion passed",
              "assertion": {
                "type": "python",
                "weight": 3,
                "value": "val = float(output[\"average_degree\"])\nif abs(val - 2.8) <= 0.001:\n  return True\nreturn False\n"
              }
            },
            {
              "pass": true,
              "score": 1,
              "reason": "Assertion passed",
              "assertion": {
                "type": "python",
                "weight": 3,
                "value": "val = float(output[\"density\"])\nif abs(val - 0.7) <= 0.001:\n  return True\nreturn False\n"
              }
            },
            {
              "pass": true,
              "score": 1,
              "reason": "Assertion passed",
              "assertion": {
                "type": "python",
                "weight": 3,
                "value": "if output[\"shortest_path_alice_eve\"] == 2:\n  return True\nreturn False\n"
              }
            },
            {
              "pass": false,
              "reason": "API error: 400 Bad Request\n{\"error\":{\"message\":\"Invalid base64 image_url.\",\"type\":\"invalid_request_error\",\"param\":null,\"code\":\"invalid_base64\"}}",
              "score": 0,
              "tokensUsed": {
                "total": 0,
                "prompt": 0,
                "completion": 0,
                "cached": 0,
                "numRequests": 0
              }
            },
            {
              "pass": false,
              "reason": "API error: 400 Bad Request\n{\"error\":{\"message\":\"Invalid base64 image_url.\",\"type\":\"invalid_request_error\",\"param\":null,\"code\":\"invalid_base64\"}}",
              "score": 0,
              "tokensUsed": {
                "total": 0,
                "prompt": 0,
                "completion": 0,
                "cached": 0,
                "numRequests": 0
              }
            }
          ],
          "assertion": null
        },
        "id": "1cd736dc-e1b1-4354-924f-44fe0cdaf311",
        "latencyMs": 18048,
        "namedScores": {},
        "prompt": {
          "raw": "",
          "label": "{{prompt}}"
        },
        "promptId": "effa18501e44aafd9bc42a2f64ffc9b6350f94025520ca2ed382f9bdc4b6e982",
        "promptIdx": 0,
        "provider": {
          "id": "exec: uv run run.py \"\"",
          "label": ""
        },
        "response": {
          "output": {
            "edge_count": 7,
            "highest_degree_node": "Bob",
            "average_degree": 2.8,
            "density": 0.7,
            "shortest_path_alice_eve": 2,
            "network_graph": "",
            "degree_histogram": ""
          }
        },
        "score": 0.5,
        "success": false,
        "testCase": {
          "vars": {
            "question": "Use the undirected network in `edges.csv`.\r\n\r\nReturn a JSON object with keys:\r\n- `edge_count`: number\r\n- `highest_degree_node`: string\r\n- `average_degree`: number\r\n- `density`: number\r\n- `shortest_path_alice_eve`: number\r\n- `network_graph`: base64 PNG string under 100kB\r\n- `degree_histogram`: base64 PNG string under 100kB\r\n\r\nAnswer:\r\n1. How many edges are in the network?\r\n2. Which node has the highest degree?\r\n3. What is the average degree of the network?\r\n4. What is the network density?\r\n5. What is the length of the shortest path between Alice and Eve?\r\n6. Draw the network with nodes labelled and edges shown. Encode as base64 PNG.\r\n7. Plot the degree distribution as a bar chart with green bars. Encode as base64 PNG."
          },
          "assert": [
            {
              "type": "is-json",
              "value": {
                "type": "object",
                "required": [
                  "edge_count",
                  "highest_degree_node",
                  "average_degree",
                  "density",
                  "shortest_path_alice_eve",
                  "network_graph",
                  "degree_histogram"
                ],
                "properties": {
                  "edge_count": {
                    "type": "number"
                  },
                  "highest_degree_node": {
                    "type": "string"
                  },
                  "average_degree": {
                    "type": "number"
                  },
                  "density": {
                    "type": "number"
                  },
                  "shortest_path_alice_eve": {
                    "type": "number"
                  },
                  "network_graph": {
                    "type": "string"
                  },
                  "degree_histogram": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "type": "python",
              "weight": 3,
              "value": "if output[\"edge_count\"] == 7 :\n  return True\nreturn False\n"
            },
            {
              "type": "python",
              "weight": 3,
              "value": "if output[\"highest_degree_node\"].lower() == \"bob\" :\n  return True\nreturn False\n"
            },
            {
              "type": "python",
              "weight": 3,
              "value": "val = float(output[\"average_degree\"])\nif abs(val - 2.8) <= 0.001:\n  return True\nreturn False\n"
            },
            {
              "type": "python",
              "weight": 3,
              "value": "val = float(output[\"density\"])\nif abs(val - 0.7) <= 0.001:\n  return True\nreturn False\n"
            },
            {
              "type": "python",
              "weight": 3,
              "value": "if output[\"shortest_path_alice_eve\"] == 2:\n  return True\nreturn False\n"
            },
            {
              "type": "llm-rubric",
              "weight": 8,
              "rubricPrompt": "[\n  {\"role\":\"system\",\"content\":\"Grade the network graph. Score 1 only if (a) nodes Alice, Bob, Carol, David, Eve are labelled; (b) edges match edges.csv; (c) layout is clear; (d) file size < 100 kB. Respond JSON {nodes:bool,edges:bool,layout:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"network_graph\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n",
              "threshold": 0.99,
              "value": "[\n  {\"role\":\"system\",\"content\":\"Grade the network graph. Score 1 only if (a) nodes Alice, Bob, Carol, David, Eve are labelled; (b) edges match edges.csv; (c) layout is clear; (d) file size < 100 kB. Respond JSON {nodes:bool,edges:bool,layout:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"network_graph\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n"
            },
            {
              "type": "llm-rubric",
              "weight": 8,
              "rubricPrompt": "[\n  {\"role\":\"system\",\"content\":\"Grade the degree histogram. Score 1 only if (a) bar chart of node degree counts; (b) bars are green; (c) axes visible and labelled; (d) file size < 100 kB. Respond JSON {bars:bool,color:bool,axes:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"degree_histogram\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n",
              "threshold": 0.99,
              "value": "[\n  {\"role\":\"system\",\"content\":\"Grade the degree histogram. Score 1 only if (a) bar chart of node degree counts; (b) bars are green; (c) axes visible and labelled; (d) file size < 100 kB. Respond JSON {bars:bool,color:bool,axes:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"degree_histogram\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n"
            }
          ],
          "options": {
            "provider": {
              "id": "openai:gpt-4.1-nano"
            },
            "transform": "JSON.parse(output)"
          },
          "metadata": {}
        },
        "testIdx": 0,
        "vars": {
          "question": "Use the undirected network in `edges.csv`.\r\n\r\nReturn a JSON object with keys:\r\n- `edge_count`: number\r\n- `highest_degree_node`: string\r\n- `average_degree`: number\r\n- `density`: number\r\n- `shortest_path_alice_eve`: number\r\n- `network_graph`: base64 PNG string under 100kB\r\n- `degree_histogram`: base64 PNG string under 100kB\r\n\r\nAnswer:\r\n1. How many edges are in the network?\r\n2. Which node has the highest degree?\r\n3. What is the average degree of the network?\r\n4. What is the network density?\r\n5. What is the length of the shortest path between Alice and Eve?\r\n6. Draw the network with nodes labelled and edges shown. Encode as base64 PNG.\r\n7. Plot the degree distribution as a bar chart with green bars. Encode as base64 PNG."
        },
        "metadata": {
          "_promptfooFileMetadata": {}
        },
        "failureReason": 1
      }
    ],
    "stats": {
      "successes": 0,
      "failures": 1,
      "errors": 0,
      "tokenUsage": {
        "prompt": 0,
        "completion": 0,
        "cached": 0,
        "total": 0,
        "numRequests": 1,
        "completionDetails": {
          "reasoning": 0,
          "acceptedPrediction": 0,
          "rejectedPrediction": 0
        },
        "assertions": {
          "total": 0,
          "prompt": 0,
          "completion": 0,
          "cached": 0,
          "numRequests": 0,
          "completionDetails": {
            "reasoning": 0,
            "acceptedPrediction": 0,
            "rejectedPrediction": 0
          }
        }
      }
    }
  },
  "config": {
    "description": "Sample evaluation – network dataset",
    "prompts": [
      "{{prompt}}"
    ],
    "providers": [
      "exec: uv run run.py \"{{ env.PROVIDER_URL }}\""
    ],
    "tests": [
      {
        "vars": {
          "question": "file://questions.txt"
        },
        "assert": [
          {
            "type": "is-json",
            "value": {
              "type": "object",
              "required": [
                "edge_count",
                "highest_degree_node",
                "average_degree",
                "density",
                "shortest_path_alice_eve",
                "network_graph",
                "degree_histogram"
              ],
              "properties": {
                "edge_count": {
                  "type": "number"
                },
                "highest_degree_node": {
                  "type": "string"
                },
                "average_degree": {
                  "type": "number"
                },
                "density": {
                  "type": "number"
                },
                "shortest_path_alice_eve": {
                  "type": "number"
                },
                "network_graph": {
                  "type": "string"
                },
                "degree_histogram": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": "python",
            "weight": 3,
            "value": "if output[\"edge_count\"] == 7 :\n  return True\nreturn False\n"
          },
          {
            "type": "python",
            "weight": 3,
            "value": "if output[\"highest_degree_node\"].lower() == \"bob\" :\n  return True\nreturn False\n"
          },
          {
            "type": "python",
            "weight": 3,
            "value": "val = float(output[\"average_degree\"])\nif abs(val - 2.8) <= 0.001:\n  return True\nreturn False\n"
          },
          {
            "type": "python",
            "weight": 3,
            "value": "val = float(output[\"density\"])\nif abs(val - 0.7) <= 0.001:\n  return True\nreturn False\n"
          },
          {
            "type": "python",
            "weight": 3,
            "value": "if output[\"shortest_path_alice_eve\"] == 2:\n  return True\nreturn False\n"
          },
          {
            "type": "llm-rubric",
            "weight": 8,
            "rubricPrompt": "[\n  {\"role\":\"system\",\"content\":\"Grade the network graph. Score 1 only if (a) nodes Alice, Bob, Carol, David, Eve are labelled; (b) edges match edges.csv; (c) layout is clear; (d) file size < 100 kB. Respond JSON {nodes:bool,edges:bool,layout:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"network_graph\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n",
            "threshold": 0.99,
            "value": "[\n  {\"role\":\"system\",\"content\":\"Grade the network graph. Score 1 only if (a) nodes Alice, Bob, Carol, David, Eve are labelled; (b) edges match edges.csv; (c) layout is clear; (d) file size < 100 kB. Respond JSON {nodes:bool,edges:bool,layout:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"network_graph\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n"
          },
          {
            "type": "llm-rubric",
            "weight": 8,
            "rubricPrompt": "[\n  {\"role\":\"system\",\"content\":\"Grade the degree histogram. Score 1 only if (a) bar chart of node degree counts; (b) bars are green; (c) axes visible and labelled; (d) file size < 100 kB. Respond JSON {bars:bool,color:bool,axes:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"degree_histogram\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n",
            "threshold": 0.99,
            "value": "[\n  {\"role\":\"system\",\"content\":\"Grade the degree histogram. Score 1 only if (a) bar chart of node degree counts; (b) bars are green; (c) axes visible and labelled; (d) file size < 100 kB. Respond JSON {bars:bool,color:bool,axes:bool,size:bool,score:number}\"},\n  {\"role\":\"user\",\"content\":[\n    {\"type\":\"image_url\",\"image_url\":{\"url\":\"data:image/png;base64,{{output[\"degree_histogram\"]}}\"}},\n    {\"type\":\"text\",\"text\":\"{{vars.question}}\"}\n  ]}\n]\n"
          }
        ]
      }
    ],
    "sharing": true,
    "defaultTest": {
      "options": {
        "provider": {
          "id": "openai:gpt-4.1-nano"
        },
        "transform": "JSON.parse(output)"
      }
    },
    "outputPath": [
      "results.json"
    ],
    "extensions": []
  },
  "shareableUrl": null,
  "metadata": {
    "promptfooVersion": "0.117.6",
    "nodeVersion": "v22.16.0",
    "platform": "linux",
    "arch": "x64",
    "exportedAt": "2025-08-19T16:31:04.671Z",
    "evaluationCreatedAt": "2025-08-19T16:30:43.125Z"
  }
}